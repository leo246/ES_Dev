input {
  file {
    path => ["/var/log/network.log"]
    sincedb_path => "/var/log/logstash.sincedb"
    start_position => "beginning"
    type => "syslog"
    tags => [ "netsyslog" ]
  }
}

filter {
        if [type] == "netsyslog" {
         grok {
         patterns_dir => ["/etc/logstash/patterns"]
         #strips timestamp and host off of the front of the syslog message leaving the raw message generated by the syslog client and saves it as "raw_message"
         #match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:elk.local} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
         match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} %{IPV4:syslog_client} %{HOSTNAME:syslog_host} %{GREEDYDATA:syslog_message}" }
         }
   geoip {
     database => "/etc/logstash/GeoLiteCity.dat"
     source => "syslog_client"
     target => "geoip"
     add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
     add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
  }
      }
}

output {
    elasticsearch {
      hosts => ["elk.local:9200", "elk2.local:9200", "elk3.local:9200"]
      template => "/opt/logstash/elasticsearch-template.json"
      template_overwrite => true
      sniffing => true
      index => "%{[logstash][netsyslog]}-%{+YYYY.MM.dd}"
    }
}
